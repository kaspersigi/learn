#include <algorithm>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <vector>

#if 0
// 超时，count效率太差
int four_sum_count(std::vector<int>& nums1, std::vector<int>& nums2, std::vector<int>& nums3, std::vector<int>& nums4)
{
    size_t answer {};
    std::unordered_multiset<int> si1 {};
    std::unordered_multiset<int> si2 {};
    for (size_t i = 0; i < nums1.size(); ++i) {
        for (size_t j = 0; j < nums2.size(); ++j) {
            int sum1 = nums1[i] + nums2[j];
            int sum2 = nums3[i] + nums4[j];
            si1.insert(sum1);
            si2.insert(sum2);
        }
    }
    std::for_each(si1.cbegin(), si1.cend(), [&](auto e) { answer += std::count(si2.cbegin(), si2.cend(), 0 - e); });
    return answer;
}
#endif

#if 1
int four_sum_count(std::vector<int>& nums1, std::vector<int>& nums2, std::vector<int>& nums3, std::vector<int>& nums4)
{
    size_t answer {};
    size_t length { nums1.size() };
    std::unordered_map<int, size_t> mi1 {};
    std::unordered_map<int, size_t> mi2 {};
    for (size_t i = 0; i < length; ++i) {
        for (size_t j = 0; j < length; ++j) {
            int sum1 = nums1[i] + nums2[j];
            int sum2 = nums3[i] + nums4[j];
            mi1[sum1]++;
            mi2[sum2]++;
        }
    }
    std::for_each(mi1.cbegin(), mi1.cend(), [&](auto e) {
        auto it = mi2.find(0 - e.first);
        if (it != mi2.end())
            answer = answer + it->second*e.second; });
    return answer;
}
#endif

#if 0
[-30,-4,-4,-24,-31,9,-8,8,-30,-5,-17,5,-13,-2,-18,-25,7,-12,2,-21,-28,-20,2,-5,-18,-14,-10,-15,-11,-28,7,8,-23,-31,-7,-11,5,4,-24,-25,-4,-32,-23,-19,0,-31,-4,5,-7,7,7,2,10,-32,5,-7,-31,9,-21,-6,2,-9,7,7,-14,-4,-14,-15,-24,-26,5,-30,8,-31,-18,-16,-31,0,-10,-15,-14,-24,7,2,-27,-25,-3,3,-30,9,2,-19,-5,-22,-23,-31,-18,1,-16,0]
[-22,4,2,-18,-20,-23,4,6,-1,-10,-25,-19,-3,6,-21,2,-4,-11,6,-2,9,-18,-3,-7,-11,-12,-5,-18,0,5,9,-8,1,-12,-28,-1,5,-27,-16,-2,-19,8,-14,-24,-27,6,-21,8,-14,-8,-5,-25,0,-30,-24,-15,-11,-21,-11,-7,-22,-8,-7,-3,-26,-8,-4,-17,-22,-9,-14,-16,9,-32,-24,-9,9,-10,-21,-8,-4,-23,6,7,-9,-28,-26,-18,-12,0,-2,-24,3,-10,-11,-18,-3,-29,-17,-7]
[7,-31,1,-19,-28,-30,-10,-18,-4,-10,-1,-28,-6,-21,5,8,8,-20,-13,-14,-28,-32,4,-26,-7,-31,2,-5,-32,-2,-3,3,7,-4,8,9,5,1,-22,-30,-27,-8,-14,0,-9,-2,10,-3,-20,-7,4,5,5,-16,-1,10,-16,-9,-19,6,-13,-19,-27,-5,-8,9,-2,-26,-29,3,-25,-28,-23,-6,-8,-14,-20,-30,5,-32,-24,-2,-15,-26,-26,2,-17,-10,-26,4,-6,-31,-20,-8,-24,-28,-26,-12,2,0]
[8,-19,9,-12,-1,-11,-17,6,-23,6,3,-29,-17,9,-1,1,-2,6,7,-28,6,-28,-24,-4,-21,-8,-8,-14,-19,-10,8,-12,5,-5,9,-13,-19,-8,-1,-5,-4,-29,0,-10,5,-11,-6,-2,1,-11,7,-3,-1,5,-18,-24,-22,-20,6,-28,-5,-4,6,-7,-1,-6,9,-28,-13,-16,-2,-29,-19,2,-21,-20,-1,-3,-24,-15,2,-2,6,-15,-19,9,6,-2,2,-26,0,-26,-14,-27,-20,-29,-31,-23,6,0]
#endif

auto main(int argc, char* argv[]) -> int
{
    std::vector<int> vi1 { -30, -4, -4, -24, -31, 9, -8, 8, -30, -5, -17, 5, -13, -2, -18, -25, 7, -12, 2, -21, -28, -20, 2, -5, -18, -14, -10, -15, -11, -28, 7, 8, -23, -31, -7, -11, 5, 4, -24, -25, -4, -32, -23, -19, 0, -31, -4, 5, -7, 7, 7, 2, 10, -32, 5, -7, -31, 9, -21, -6, 2, -9, 7, 7, -14, -4, -14, -15, -24, -26, 5, -30, 8, -31, -18, -16, -31, 0, -10, -15, -14, -24, 7, 2, -27, -25, -3, 3, -30, 9, 2, -19, -5, -22, -23, -31, -18, 1, -16, 0 };
    std::vector<int> vi2 { -22, 4, 2, -18, -20, -23, 4, 6, -1, -10, -25, -19, -3, 6, -21, 2, -4, -11, 6, -2, 9, -18, -3, -7, -11, -12, -5, -18, 0, 5, 9, -8, 1, -12, -28, -1, 5, -27, -16, -2, -19, 8, -14, -24, -27, 6, -21, 8, -14, -8, -5, -25, 0, -30, -24, -15, -11, -21, -11, -7, -22, -8, -7, -3, -26, -8, -4, -17, -22, -9, -14, -16, 9, -32, -24, -9, 9, -10, -21, -8, -4, -23, 6, 7, -9, -28, -26, -18, -12, 0, -2, -24, 3, -10, -11, -18, -3, -29, -17, -7 };
    std::vector<int> vi3 { 7, -31, 1, -19, -28, -30, -10, -18, -4, -10, -1, -28, -6, -21, 5, 8, 8, -20, -13, -14, -28, -32, 4, -26, -7, -31, 2, -5, -32, -2, -3, 3, 7, -4, 8, 9, 5, 1, -22, -30, -27, -8, -14, 0, -9, -2, 10, -3, -20, -7, 4, 5, 5, -16, -1, 10, -16, -9, -19, 6, -13, -19, -27, -5, -8, 9, -2, -26, -29, 3, -25, -28, -23, -6, -8, -14, -20, -30, 5, -32, -24, -2, -15, -26, -26, 2, -17, -10, -26, 4, -6, -31, -20, -8, -24, -28, -26, -12, 2, 0 };
    std::vector<int> vi4 { 8, -19, 9, -12, -1, -11, -17, 6, -23, 6, 3, -29, -17, 9, -1, 1, -2, 6, 7, -28, 6, -28, -24, -4, -21, -8, -8, -14, -19, -10, 8, -12, 5, -5, 9, -13, -19, -8, -1, -5, -4, -29, 0, -10, 5, -11, -6, -2, 1, -11, 7, -3, -1, 5, -18, -24, -22, -20, 6, -28, -5, -4, 6, -7, -1, -6, 9, -28, -13, -16, -2, -29, -19, 2, -21, -20, -1, -3, -24, -15, 2, -2, 6, -15, -19, 9, 6, -2, 2, -26, 0, -26, -14, -27, -20, -29, -31, -23, 6, 0 };
    std::cout << four_sum_count(vi1, vi2, vi3, vi4) << std::endl;
    return 0;
}