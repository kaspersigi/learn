     1                                  ;应用程序，2022-10-29
     2                                  
     3                                  ;===============================================================================
     4                                  section app_header                                ;应用程序头部
     5 00000000 [CE01000000000000]        length       dq app_end                         ;#0：用户程序的总长度（字节数）
     6 00000008 [C201000000000000]        entry        dq start                           ;#8：用户程序入口点
     7 00000010 0000000000000000          linear       dq 0                               ;#16：用户程序加载的虚拟（线性）地址
     8                                  
     9                                  ;===============================================================================
    10                                  section app_data                                  ;应用程序数据段
    11                                  
    12 00000000 5468726561642000          tid_prex     db "Thread ", 0                    ;线程标识前缀文本
    13 00000008 203C5461736B2000          pid_prex     db " <Task ", 0                    ;进程标识前缀文本
    14 00000010 3E206F6E2043505520-       cpu_prex     db "> on CPU ", 0                  ;处理器标识的前缀文本
    14 00000019 00                 
    15 0000001A 20646F20312B322B33-       delim        db " do 1+2+3+...+", 0             ;分隔文本
    15 00000023 2B2E2E2E2B00       
    16 00000029 3D00                      equal        db "=", 0                          ;等于号
    17                                  
    18                                  ;===============================================================================
    19                                  section app_code                                  ;应用程序代码段
    20                                  
    21                                  %include "..\common\user_static64.lib"
    22                              <1> ;用户程序使用的例程库，用来模拟高级语言的静态库。有些功能直接在本文件中实现，但
    23                              <1> ;有些功能需要通过syscall指令使用内核提供的系统调用。
    24                              <1> ;创建时间：2022-01-30 18:30，李忠
    25                              <1> ;此文件需要用预处理指令%include引入用户程序。
    26                              <1> 
    27                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    28                              <1>          bits 64
    29                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    30                              <1> bin64_to_dec:                                     ;将二进制数转换为十进制字符串。
    31                              <1>                                                   ;输入：R8=64位二进制数
    32                              <1>                                                   ;      RBX=目标缓冲区线性地址
    33 00000000 50                  <1>          push rax
    34 00000001 53                  <1>          push rbx
    35 00000002 51                  <1>          push rcx
    36 00000003 52                  <1>          push rdx
    37 00000004 4150                <1>          push r8
    38                              <1> 
    39 00000006 4C89C0              <1>          mov rax, r8                              ;!!
    40 00000009 41B80A000000        <1>          mov r8, 10
    41 0000000F 4831C9              <1>          xor rcx, rcx
    42                              <1> 
    43                              <1>   .next_div:
    44 00000012 4831D2              <1>          xor rdx, rdx
    45 00000015 49F7F0              <1>          div r8
    46 00000018 52                  <1>          push rdx                                 ;保存分解的数位
    47 00000019 48FFC1              <1>          inc rcx                                  ;递增压栈的次数
    48 0000001C 4809C0              <1>          or rax, rax                              ;商为0？
    49 0000001F 7402                <1>          jz .rotate
    50 00000021 EBEF                <1>          jmp .next_div
    51                              <1> 
    52                              <1>   .rotate:
    53 00000023 5A                  <1>          pop rdx
    54 00000024 80C230              <1>          add dl, 0x30                             ;数位转换成ASCII编码
    55 00000027 8813                <1>          mov [rbx], dl
    56 00000029 48FFC3              <1>          inc rbx
    57 0000002C E2F5                <1>          loop .rotate
    58                              <1> 
    59 0000002E C60300              <1>          mov byte [rbx], 0
    60                              <1> 
    61 00000031 4158                <1>          pop r8
    62 00000033 5A                  <1>          pop rdx
    63 00000034 59                  <1>          pop rcx
    64 00000035 5B                  <1>          pop rbx
    65 00000036 58                  <1>          pop rax
    66                              <1> 
    67 00000037 C3                  <1>          ret                                      ;段内返回
    68                              <1> 
    69                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    70                              <1> string_concatenates:                              ;将源字符串连接到目的字符串的尾部
    71                              <1>                                                   ;输入：RSI=源字符串的线性地址
    72                              <1>                                                   ;      RDI=目的字符串的线性地址
    73 00000038 50                  <1>          push rax
    74 00000039 56                  <1>          push rsi
    75 0000003A 57                  <1>          push rdi
    76                              <1> 
    77                              <1>   .r0:
    78 0000003B 803F00              <1>          cmp byte [rdi], 0
    79 0000003E 7405                <1>          jz .r1
    80 00000040 48FFC7              <1>          inc rdi
    81 00000043 EBF6                <1>          jmp .r0
    82                              <1> 
    83                              <1>   .r1:
    84 00000045 8A06                <1>          mov al, [rsi]
    85 00000047 8807                <1>          mov [rdi], al
    86 00000049 3C00                <1>          cmp al, 0
    87 0000004B 7408                <1>          jz .r2
    88 0000004D 48FFC6              <1>          inc rsi
    89 00000050 48FFC7              <1>          inc rdi
    90 00000053 EBF0                <1>          jmp .r1
    91                              <1> 
    92                              <1>   .r2:
    93 00000055 5F                  <1>          pop rdi
    94 00000056 5E                  <1>          pop rsi
    95 00000057 58                  <1>          pop rax
    96                              <1> 
    97 00000058 C3                  <1>          ret
    98                              <1> 
    99                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   100                              <1> 
    22                                  
    23                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    24                                           bits 64
    25                                  
    26                                  thread_procedure:
    27 00000059 4889E5                           mov rbp, rsp                             ;RBP访问栈中数据，高级语言中的局部变量。
    28 0000005C 4883EC38                         sub rsp, 56
    29                                  
    30 00000060 B80A000000                       mov rax, 10                              ;分配内存以连接字符串
    31 00000065 BA20010000                       mov rdx, 288                             ;288个字节
    32 0000006A 0F05                             syscall
    33 0000006C 4C896DF8                         mov [rbp-8], r13                         ;RBP-8->总字符串缓冲区的线性地址
    34                                  
    35 00000070 4981C580000000                   add r13, 128
    36 00000077 4C896DF0                         mov [rbp-16], r13                        ;RBP-16->用来保存线程标识的文本
    37                                  
    38 0000007B 4983C520                         add r13, 32
    39 0000007F 4C896DE8                         mov [rbp-24], r13                        ;RBP-24->用来保存任务标识的文本
    40                                  
    41 00000083 4983C520                         add r13, 32
    42 00000087 4C896DE0                         mov [rbp-32], r13                        ;RBP-32->用来保存处理器编号的文本
    43                                  
    44 0000008B 4983C520                         add r13, 32
    45 0000008F 4C896DD8                         mov [rbp-40], r13                        ;RBP-40->用来保存加数的文本
    46                                  
    47 00000093 4983C520                         add r13, 32
    48 00000097 4C896DD0                         mov [rbp-48], r13                        ;RBP-48->用来保存累加和的文本
    49                                  
    50 0000009B B808000000                       mov rax, 8                               ;获得当前线程的标识
    51 000000A0 0F05                             syscall
    52 000000A2 4989C0                           mov r8, rax
    53 000000A5 488B5DF0                         mov rbx, [rbp-16]
    54 000000A9 E852FFFFFF                       call bin64_to_dec                        ;将线程标识转换为字符串
    55                                  
    56 000000AE B804000000                       mov rax, 4                               ;获得当前任务（进程）的标识
    57 000000B3 0F05                             syscall
    58 000000B5 4989C0                           mov r8, rax
    59 000000B8 488B5DE8                         mov rbx, [rbp-24]
    60 000000BC E83FFFFFFF                       call bin64_to_dec                        ;将进程标识转换为字符串
    61                                  
    62 000000C1 4C8B25(10000000)                 mov r12, [rel linear]                    ;当前程序加载的起始线性地址
    63                                  
    64 000000C8 B800000000                       mov rax, 0                               ;确定当前程序可以使用的显示行
    65 000000CD 0F05                             syscall                                  ;可用显示行，DH=行号
    66                                  
    67 000000CF B200                             mov dl, 0
    68 000000D1 41B10F                           mov r9b, 0x0f
    69                                  
    70 000000D4 41B800000000                     mov r8, 0                                ;R8用于存放累加和
    71 000000DA 41BA01000000                     mov r10, 1                               ;R10用于提供加数
    72                                    .cusum:
    73 000000E0 4D01D0                           add r8, r10
    74 000000E3 488B5DD0                         mov rbx, [rbp-48]
    75 000000E7 E814FFFFFF                       call bin64_to_dec                        ;本次相加的结果转换为字符串
    76                                  
    77 000000EC 4D87C2                           xchg r8, r10
    78 000000EF 488B5DD8                         mov rbx, [rbp-40]
    79 000000F3 E808FFFFFF                       call bin64_to_dec                        ;本次的加数转换为字符串
    80                                  
    81 000000F8 4D87C2                           xchg r8, r10
    82                                  
    83 000000FB B806000000                       mov rax, 6                               ;获得当前处理器的编号
    84 00000100 0F05                             syscall
    85                                  
    86 00000102 4150                             push r8
    87 00000104 4989C0                           mov r8, rax
    88 00000107 488B5DE0                         mov rbx, [rbp-32]
    89 0000010B E8F0FEFFFF                       call bin64_to_dec                        ;将处理器的编号转换为字符串
    90 00000110 4158                             pop r8
    91                                  
    92 00000112 488B7DF8                         mov rdi, [rbp-8]
    93 00000116 C60700                           mov byte [rdi], 0
    94                                  
    95 00000119 498DB424[00000000]               lea rsi, [r12 + tid_prex]
    96 00000121 E812FFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    97                                  
    98 00000126 488B75F0                         mov rsi, [rbp-16]
    99 0000012A E809FFFFFF                       call string_concatenates
   100                                  
   101 0000012F 498DB424[08000000]               lea rsi, [r12 + pid_prex]
   102 00000137 E8FCFEFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
   103                                  
   104 0000013C 488B75E8                         mov rsi, [rbp-24]
   105 00000140 E8F3FEFFFF                       call string_concatenates
   106                                  
   107 00000145 498DB424[10000000]               lea rsi, [r12 + cpu_prex]
   108 0000014D E8E6FEFFFF                       call string_concatenates
   109                                  
   110 00000152 488B75E0                         mov rsi, [rbp-32]
   111 00000156 E8DDFEFFFF                       call string_concatenates
   112                                  
   113 0000015B 498DB424[1A000000]               lea rsi, [r12 + delim]
   114 00000163 E8D0FEFFFF                       call string_concatenates
   115                                  
   116 00000168 488B75D8                         mov rsi, [rbp-40]
   117 0000016C E8C7FEFFFF                       call string_concatenates
   118                                  
   119 00000171 498DB424[29000000]               lea rsi, [r12 + equal]
   120 00000179 E8BAFEFFFF                       call string_concatenates
   121                                  
   122 0000017E 488B75D0                         mov rsi, [rbp-48]
   123 00000182 E8B1FEFFFF                       call string_concatenates
   124                                  
   125 00000187 B802000000                       mov rax, 2                               ;在指定坐标显示字符串
   126 0000018C 4889FB                           mov rbx, rdi
   127 0000018F 0F05                             syscall
   128                                  
   129 00000191 49FFC2                           inc r10
   130 00000194 4981FA10270000                   cmp r10, 10000;000
   131 0000019B 0F8E3FFFFFFF                     jle .cusum
   132                                  
   133 000001A1 4889EC                           mov rsp, rbp                             ;栈平衡到返回位置
   134 000001A4 C3                               ret
   135                                  
   136                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   137                                  main:
   138 000001A5 488B35(10000000)                 mov rsi, [rel linear]                    ;当前程序加载的起始线性地址
   139                                  
   140 000001AC 488DB6[59000000]                 lea rsi, [rsi + thread_procedure]        ;线程例程的线性地址
   141 000001B3 B807000000                       mov rax, 7                               ;创建线程
   142 000001B8 0F05                             syscall                                  ;创建第一个线程
   143 000001BA 0F05                             syscall                                  ;创建第二个线程
   144                                  
   145 000001BC E898FEFFFF                       call thread_procedure                    ;普通的例程调用（可返回）
   146                                  
   147 000001C1 C3                               ret
   148                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   149                                  start:   ;程序的入口点
   150                                  
   151                                           ;这里放置初始化代码，比如初始化全局数据（变量）
   152                                  
   153 000001C2 E8DEFFFFFF                       call main
   154                                  
   155                                           ;这里放置清理代码
   156                                  
   157 000001C7 B805000000                       mov rax, 5                               ;终止任务
   158 000001CC 0F05                             syscall
   159                                  
   160                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   161                                  app_end:
