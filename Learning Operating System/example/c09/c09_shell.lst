     1                                  ;系统外壳程序，2022-10-29。用于模拟一个操作系统用户接口，比如Linux控制台
     2                                  
     3                                  ;===============================================================================
     4                                  section shell_header                              ;外壳程序头部
     5 00000000 [2701000000000000]        length       dq shell_end                       ;#0：外壳程序的总长度（字节数）
     6 00000008 [2201000000000000]        entry        dq start                           ;#8：外壳入口点
     7 00000010 0000000000000000          linear       dq 0                               ;#16：外壳加载的虚拟（线性）地址
     8                                  
     9                                  ;===============================================================================
    10                                  section shell_data                                ;外壳程序数据段
    11 00000000 00<rep 80h>               shell_msg    times 128 db 0
    12                                  
    13 00000080 5468726561642000          msg0         db "Thread ", 0
    14 00000088 00<rep 20h>               tid          times 32 db 0                      ;线程ID的文本
    15 000000A8 203C4F53205348454C-       msg1         db " <OS SHELL> on CPU ", 0
    15 000000B1 4C3E206F6E20435055-
    15 000000BA 2000               
    16 000000BC 00<rep 20h>               pcpu         times 32 db 0                      ;处理器编号的文本
    17 000000DC 202D00                    msg2         db " -", 0
    18                                  
    19 000000DF 00<rep 20h>               time_buff    times 32 db 0                      ;当前时间的文本
    20                                  
    21                                  
    22                                  ;===============================================================================
    23                                  section shell_code                                ;外壳程序代码段
    24                                  
    25                                  %include "..\common\user_static64.lib"
    26                              <1> ;用户程序使用的例程库，用来模拟高级语言的静态库。有些功能直接在本文件中实现，但
    27                              <1> ;有些功能需要通过syscall指令使用内核提供的系统调用。
    28                              <1> ;创建时间：2022-01-30 18:30，李忠
    29                              <1> ;此文件需要用预处理指令%include引入用户程序。
    30                              <1> 
    31                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    32                              <1>          bits 64
    33                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    34                              <1> bin64_to_dec:                                     ;将二进制数转换为十进制字符串。
    35                              <1>                                                   ;输入：R8=64位二进制数
    36                              <1>                                                   ;      RBX=目标缓冲区线性地址
    37 00000000 50                  <1>          push rax
    38 00000001 53                  <1>          push rbx
    39 00000002 51                  <1>          push rcx
    40 00000003 52                  <1>          push rdx
    41 00000004 4150                <1>          push r8
    42                              <1> 
    43 00000006 4C89C0              <1>          mov rax, r8                              ;!!
    44 00000009 41B80A000000        <1>          mov r8, 10
    45 0000000F 4831C9              <1>          xor rcx, rcx
    46                              <1> 
    47                              <1>   .next_div:
    48 00000012 4831D2              <1>          xor rdx, rdx
    49 00000015 49F7F0              <1>          div r8
    50 00000018 52                  <1>          push rdx                                 ;保存分解的数位
    51 00000019 48FFC1              <1>          inc rcx                                  ;递增压栈的次数
    52 0000001C 4809C0              <1>          or rax, rax                              ;商为0？
    53 0000001F 7402                <1>          jz .rotate
    54 00000021 EBEF                <1>          jmp .next_div
    55                              <1> 
    56                              <1>   .rotate:
    57 00000023 5A                  <1>          pop rdx
    58 00000024 80C230              <1>          add dl, 0x30                             ;数位转换成ASCII编码
    59 00000027 8813                <1>          mov [rbx], dl
    60 00000029 48FFC3              <1>          inc rbx
    61 0000002C E2F5                <1>          loop .rotate
    62                              <1> 
    63 0000002E C60300              <1>          mov byte [rbx], 0
    64                              <1> 
    65 00000031 4158                <1>          pop r8
    66 00000033 5A                  <1>          pop rdx
    67 00000034 59                  <1>          pop rcx
    68 00000035 5B                  <1>          pop rbx
    69 00000036 58                  <1>          pop rax
    70                              <1> 
    71 00000037 C3                  <1>          ret                                      ;段内返回
    72                              <1> 
    73                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    74                              <1> string_concatenates:                              ;将源字符串连接到目的字符串的尾部
    75                              <1>                                                   ;输入：RSI=源字符串的线性地址
    76                              <1>                                                   ;      RDI=目的字符串的线性地址
    77 00000038 50                  <1>          push rax
    78 00000039 56                  <1>          push rsi
    79 0000003A 57                  <1>          push rdi
    80                              <1> 
    81                              <1>   .r0:
    82 0000003B 803F00              <1>          cmp byte [rdi], 0
    83 0000003E 7405                <1>          jz .r1
    84 00000040 48FFC7              <1>          inc rdi
    85 00000043 EBF6                <1>          jmp .r0
    86                              <1> 
    87                              <1>   .r1:
    88 00000045 8A06                <1>          mov al, [rsi]
    89 00000047 8807                <1>          mov [rdi], al
    90 00000049 3C00                <1>          cmp al, 0
    91 0000004B 7408                <1>          jz .r2
    92 0000004D 48FFC6              <1>          inc rsi
    93 00000050 48FFC7              <1>          inc rdi
    94 00000053 EBF0                <1>          jmp .r1
    95                              <1> 
    96                              <1>   .r2:
    97 00000055 5F                  <1>          pop rdi
    98 00000056 5E                  <1>          pop rsi
    99 00000057 58                  <1>          pop rax
   100                              <1> 
   101 00000058 C3                  <1>          ret
   102                              <1> 
   103                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   104                              <1> 
    26                                  
    27                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    28                                           bits 64
    29                                  
    30                                  main:
    31                                           ;这里可显示一个界面，比如Windows桌面或者Linux控制台窗口，用于接收用户
    32                                           ;输入的命令，包括显示磁盘文件、设置系统参数或者运行一个程序。我们的系
    33                                           ;统很简单，所以不提供这些功能。
    34                                  
    35                                           ;以下， 模拟按用户的要求运行3个程序......
    36 00000059 41B864000000                     mov r8, 100
    37 0000005F B803000000                       mov rax, 3
    38 00000064 0F05                             syscall
    39 00000066 0F05                             syscall
    40 00000068 0F05                             syscall                                  ;用同一个副本创建3个任务
    41                                  
    42 0000006A B800000000                       mov rax, 0
    43 0000006F 0F05                             syscall                                  ;可用显示行，DH=行号
    44 00000071 B200                             mov dl, 0
    45 00000073 41B15F                           mov r9b, 0x5f
    46                                  
    47 00000076 4C8B25(10000000)                 mov r12, [rel linear]
    48                                    _time:
    49 0000007D 498D9C24[DF000000]               lea rbx, [r12 + time_buff]
    50 00000085 B801000000                       mov rax, 1
    51 0000008A 0F05                             syscall
    52                                  
    53 0000008C B806000000                       mov rax, 6                               ;获得当前处理器的编号
    54 00000091 0F05                             syscall
    55 00000093 4989C0                           mov r8, rax
    56 00000096 498D9C24[BC000000]               lea rbx, [r12 + pcpu]
    57 0000009E E85DFFFFFF                       call bin64_to_dec                        ;将处理器的编号转换为字符串
    58                                  
    59 000000A3 B808000000                       mov rax, 8                               ;返回当前线程的标识
    60 000000A8 0F05                             syscall
    61 000000AA 4989C0                           mov r8, rax
    62 000000AD 498D9C24[88000000]               lea rbx, [r12 + tid]
    63 000000B5 E846FFFFFF                       call bin64_to_dec                        ;将处理器的编号转换为字符串
    64                                  
    65 000000BA 498DBC24[00000000]               lea rdi, [r12 + shell_msg]
    66 000000C2 C60700                           mov byte [rdi], 0
    67                                  
    68 000000C5 498DB424[80000000]               lea rsi, [r12 + msg0]
    69 000000CD E866FFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    70                                  
    71 000000D2 498DB424[88000000]               lea rsi, [r12 + tid]
    72 000000DA E859FFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    73                                  
    74 000000DF 498DB424[A8000000]               lea rsi, [r12 + msg1]
    75 000000E7 E84CFFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    76                                  
    77 000000EC 498DB424[BC000000]               lea rsi, [r12 + pcpu]
    78 000000F4 E83FFFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    79                                  
    80 000000F9 498DB424[DC000000]               lea rsi, [r12 + msg2]
    81 00000101 E832FFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    82                                  
    83 00000106 498DB424[DF000000]               lea rsi, [r12 + time_buff]
    84 0000010E E825FFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    85                                  
    86 00000113 4889FB                           mov rbx, rdi
    87 00000116 B802000000                       mov rax, 2
    88 0000011B 0F05                             syscall
    89                                  
    90 0000011D E95BFFFFFF                       jmp _time
    91                                  
    92                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    93                                  start:    ;程序的入口点
    94 00000122 E832FFFFFF                       call main
    95                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    96                                  shell_end:
