     1                                  ;内核加载器，2021-7-18
     2                                  ;-------------------------------------------------------------------------------
     3                                  %include "..\common\global_defs.wid"
     4                              <1> ;系统全局使用的常量定义，2021-09-05
     5                              <1> 
     6                              <1> ;定义地址的，至少按16字节对齐！！！与分页有关的地址必须按4KB对齐！！！
     7                              <1> 
     8                              <1> %ifndef _GLOBAL_DEFS_
     9                              <1>    %define _GLOBAL_DEFS_
    10                              <1> 
    11                              <1>    SDA_PHY_ADDR        equ     0x00007e00              ;系统数据区的起始物理地址
    12                              <1>    PML5_PHY_ADDR       equ     0x00009000              ;内核5级头表物理地址
    13                              <1>    PML4_PHY_ADDR       equ     0x0000a000              ;内核4级头表物理地址
    14                              <1>    PDPT_PHY_ADDR       equ     0x0000b000              ;对应于低端2MB的内核页目录指针表物理地址
    15                              <1>    PDT_PHY_ADDR        equ     0x0000c000              ;对应于低端2MB的页目录表物理地址
    16                              <1>    PT_PHY_ADDR         equ     0x0000d000              ;对应于低端2MB的内核页表的物理地址
    17                              <1>    IDT_PHY_ADDR        equ     0x0000e000              ;中断描述符表的物理地址
    18                              <1>    LDR_PHY_ADDR        equ     0x0000f000              ;用于安装内核加载器的起始物理地址
    19                              <1>    GDT_PHY_ADDR        equ     0x00010000              ;全局描述符表GDT的物理地址
    20                              <1>    CORE_PHY_ADDR       equ     0x00020000              ;内核的起始物理地址
    21                              <1>    COR_PDPT_ADDR       equ     0x00100000              ;从这个物理地址开始的1MB是内核的254个页目录指针表
    22                              <1> 
    23                              <1>    LDR_START_SECTOR    equ     1                       ;内核加载器在硬盘上的起始逻辑扇区号
    24                              <1>    COR_START_SECTOR    equ     9                       ;内核程序在硬盘上的起始逻辑扇区号
    25                              <1> 
    26                              <1>    ;虚拟内存空间的高端起始于线性地址0xffff800000000000
    27                              <1>    UPPER_LINEAR_START  equ     0xffff800000000000
    28                              <1> 
    29                              <1>    UPPER_CORE_LINEAR   equ     UPPER_LINEAR_START + CORE_PHY_ADDR     ;内核的高端线性地址
    30                              <1>    UPPER_TEXT_VIDEO    equ     UPPER_LINEAR_START + 0x000b8000        ;文本显示缓冲区的高端起始线性地址
    31                              <1>    UPPER_SDA_LINEAR    equ     UPPER_LINEAR_START + SDA_PHY_ADDR      ;系统数据区的高端线性地址
    32                              <1>    UPPER_GDT_LINEAR    equ     UPPER_LINEAR_START + GDT_PHY_ADDR      ;GDT的高端线性地址
    33                              <1>    UPPER_IDT_LINEAR    equ     UPPER_LINEAR_START + IDT_PHY_ADDR      ;IDT的高端线性地址
    34                              <1> 
    35                              <1>    ;与全局描述符表有关的选择子定义，及内存管理有关的常量定义
    36                              <1>    CORE_CODE64_SEL     equ     0x0018                  ;内核代码段的描述符选择子（RPL=00）
    37                              <1>    CORE_STACK64_SEL    equ     0x0020                  ;内核栈段的描述符选择子（RPL=00）
    38                              <1>    RESVD_DESC_SEL      equ     0x002b                  ;保留的描述符选择子
    39                              <1>    USER_CODE64_SEL     equ     0x003b                  ;3特权级代码段的描述符选择子（RPL=11）
    40                              <1>    USER_STACK64_SEL    equ     0x0033                  ;3特权级栈段的描述符选择子（RPL=11）
    41                              <1> 
    42                              <1>    PHY_MEMORY_SIZE     equ     32                      ;物理内存大小（MB），要求至少3MB
    43                              <1>    CORE_ALLOC_START    equ     0xffff800000200000      ;在虚拟地址空间高端（内核）分配内存时的起始地址
    44                              <1>    USER_ALLOC_START    equ     0x0000000000000000      ;在每个任务虚拟地址空间低端分配内存时的起始地址
    45                              <1> 
    46                              <1>    ;创建任务时，需要分配一个物理页作为新任务的4级头表，并对这个页做初始化操作，这需要一个线性地址
    47                              <1>    NEW_PML4_LINEAR     equ     0xffffff7ffffff000      ;用来映射新任务4级头表的线性地址
    48                              <1> 
    49                              <1>    LAPIC_START_ADDR    equ     0xffffff7ffee00000      ;LOCAL APIC寄存器的起始地址
    50                              <1> 
    51                              <1> %endif
     4                                  ;===============================================================================
     5                                  section loader
     6 00000000 6C697A68                  marker       dd "lizh"                              ;内核加载器有效标志  +00
     7 00000004 [00000000]                length       dd ldr_end                             ;内核加载器的长度    +04
     8 00000008 [96010000]                entry        dd start                               ;内核加载器的入口点  +08
     9                                  
    10 0000000C 4D6F7573654865726F-       msg0         db "MouseHero x64 course learning.",0x0d,0x0a
    10 00000015 2078363420636F7572-
    10 0000001E 7365206C6561726E69-
    10 00000027 6E672E0D0A         
    11                                  
    12 0000002C 78363420617661696C-       arch0        db "x64 available(64-bit processor installed).",0x0d,0x0a
    12 00000035 61626C652836342D62-
    12 0000003E 69742070726F636573-
    12 00000047 736F7220696E737461-
    12 00000050 6C6C6564292E0D0A   
    13 00000058 783634206E6F742061-       arch1        db "x64 not available(64-bit processor not installed).",0x0d,0x0a
    13 00000061 7661696C61626C6528-
    13 0000006A 36342D626974207072-
    13 00000073 6F636573736F72206E-
    13 0000007C 6F7420696E7374616C-
    13 00000085 6C6564292E0D0A     
    14                                  
    15 0000008C 50726F636573736F72-       brand_msg    db "Processor:"
    15 00000095 3A                 
    16 00000096 00<rep 30h>                   brand    times 48  db 0
    17 000000C6 0D0A                                   db  0x0d,0x0a
    18                                  
    19 000000C8 506879736963616C20-       cpu_addr     db "Physical address size:"
    19 000000D1 616464726573732073-
    19 000000DA 697A653A           
    20 000000DE 20<rep 3h>                   paddr     times 3 db ' '
    21 000000E1 2C                                     db ","
    22 000000E2 4C696E656172206164-                    db "Linear address size:"
    22 000000EB 64726573732073697A-
    22 000000F4 653A               
    23 000000F6 20<rep 3h>                   laddr     times 3 db ' '
    24 000000F9 0D0A                                   db 0x0d,0x0a
    25                                  
    26 000000FB 50726F74656374206D-       protect      db "Protect mode has been entered to prepare for IA-32e mode.",0x0d,0x0a,0
    26 00000104 6F6465206861732062-
    26 0000010D 65656E20656E746572-
    26 00000116 656420746F20707265-
    26 0000011F 7061726520666F7220-
    26 00000128 49412D333265206D6F-
    26 00000131 64652E0D0A00       
    27                                  
    28 00000137 49412D333265206D6F-       ia_32e       db "IA-32e mode(aka,long mode) is active.Specifically,compatibility mode.",0x0d,0x0a,0
    28 00000140 646528616B612C6C6F-
    28 00000149 6E67206D6F64652920-
    28 00000152 697320616374697665-
    28 0000015B 2E5370656369666963-
    28 00000164 616C6C792C636F6D70-
    28 0000016D 61746962696C697479-
    28 00000176 206D6F64652E0D0A00 
    29                                  
    30                                  ;-------------------------------------------------------------------------
    31                                   no_ia_32e:
    32 0000017F B403                             mov ah, 0x03                                 ;获取光标位置
    33 00000181 B700                             mov bh, 0x00
    34 00000183 CD10                             int 0x10
    35                                  
    36 00000185 BD[5800]                         mov bp, arch1
    37 00000188 B93400                           mov cx, brand_msg - arch1
    38 0000018B B80113                           mov ax, 0x1301                               ;写字符串，光标移动
    39 0000018E B700                             mov bh, 0
    40 00000190 B307                             mov bl, 0x07                                 ;属性：红底亮白字
    41 00000192 CD10                             int 0x10                                     ;显示字符串
    42                                  
    43 00000194 FA                               cli
    44 00000195 F4                               hlt
    45                                  
    46                                    start:
    47 00000196 B403                             mov ah, 0x03                                 ;获取光标位置
    48 00000198 B700                             mov bh, 0x00
    49 0000019A CD10                             int 0x10
    50                                  
    51 0000019C BD[0C00]                         mov bp, msg0
    52 0000019F B92000                           mov cx, arch0 - msg0
    53 000001A2 B80113                           mov ax, 0x1301                               ;写字符串，光标移动
    54 000001A5 B700                             mov bh, 0
    55 000001A7 B34F                             mov bl, 0x4f                                 ;属性：红底亮白字
    56 000001A9 CD10                             int 0x10                                     ;显示字符串
    57                                  
    58 000001AB 66B800000080                     mov eax, 0x80000000                          ;返回处理器支持的最大扩展功能号
    59 000001B1 0FA2                             cpuid
    60 000001B3 663D00000080                     cmp eax, 0x80000000                          ;支持大于0x80000000的功能号？
    61 000001B9 76C4                             jbe no_ia_32e                                ;不支持，转no_ia_32e处执行
    62                                  
    63 000001BB 66B801000080                     mov eax, 0x80000001                          ;返回扩展的签名和特性标志位
    64 000001C1 0FA2                             cpuid                                        ;EDX包含扩展特性标志位
    65 000001C3 660FBAE21D                       bt edx, 29                                   ;EDX的位29是IA-32e模式支持标志
    66                                           ;注意：在VirtualBox虚拟机上，操作系统的版本如果不选择64位，则此标志检测失败。
    67 000001C8 73B5                             jnc no_ia_32e                                ;不支持，转no_ia_32e处执行
    68                                  
    69 000001CA B403                             mov ah, 0x03                                 ;获取光标位置
    70 000001CC B700                             mov bh, 0x00
    71 000001CE CD10                             int 0x10
    72                                  
    73 000001D0 BD[2C00]                         mov bp, arch0
    74 000001D3 B92C00                           mov cx, arch1 - arch0
    75 000001D6 B80113                           mov ax, 0x1301                               ;写字符串，光标移动
    76 000001D9 B700                             mov bh, 0
    77 000001DB B307                             mov bl, 0x07                                 ;属性：黑底白字
    78 000001DD CD10                             int 0x10                                     ;显示字符串
    79                                  
    80                                           ;显示处理器商标信息
    81 000001DF 66B800000080                     mov eax, 0x80000000
    82 000001E5 0FA2                             cpuid                                        ;返回最大支持的扩展功能号
    83 000001E7 663D04000080                     cmp eax, 0x80000004
    84 000001ED 7266                             jb .no_brand
    85                                  
    86 000001EF 66B802000080                     mov eax, 0x80000002
    87 000001F5 0FA2                             cpuid
    88 000001F7 66A3[9600]                       mov [brand + 0x00], eax
    89 000001FB 66891E[9A00]                     mov [brand + 0x04], ebx
    90 00000200 66890E[9E00]                     mov [brand + 0x08], ecx
    91 00000205 668916[A200]                     mov [brand + 0x0c], edx
    92                                  
    93 0000020A 66B803000080                     mov eax, 0x80000003
    94 00000210 0FA2                             cpuid
    95 00000212 66A3[A600]                       mov [brand + 0x10], eax
    96 00000216 66891E[AA00]                     mov [brand + 0x14], ebx
    97 0000021B 66890E[AE00]                     mov [brand + 0x18], ecx
    98 00000220 668916[B200]                     mov [brand + 0x1c], edx
    99                                  
   100 00000225 66B804000080                     mov eax, 0x80000004
   101 0000022B 0FA2                             cpuid
   102 0000022D 66A3[B600]                       mov [brand + 0x20], eax
   103 00000231 66891E[BA00]                     mov [brand + 0x24], ebx
   104 00000236 66890E[BE00]                     mov [brand + 0x28], ecx
   105 0000023B 668916[C200]                     mov [brand + 0x2c], edx
   106                                  
   107 00000240 B403                             mov ah, 0x03                                 ;获取光标位置
   108 00000242 B700                             mov bh, 0x00
   109 00000244 CD10                             int 0x10
   110                                  
   111 00000246 BD[8C00]                         mov bp, brand_msg
   112 00000249 B93C00                           mov cx, cpu_addr - brand_msg
   113 0000024C B80113                           mov ax, 0x1301                               ;写字符串，光标移动
   114 0000024F B700                             mov bh, 0
   115 00000251 B307                             mov bl, 0x07                                 ;属性：黑底白字
   116 00000253 CD10                             int 0x10                                     ;显示字符串
   117                                  
   118                                   .no_brand:
   119                                           ;获取和存储处理器的物理/虚拟地址尺寸信息
   120 00000255 66B800000080                     mov eax, 0x80000000                          ;返回最大支持的扩展功能号
   121 0000025B 0FA2                             cpuid
   122 0000025D 663D08000080                     cmp eax, 0x80000008
   123 00000263 B82430                           mov ax, 0x3024                               ;设置默认的处理器物理/逻辑地址位数36和48
   124 00000266 7208                             jb .no_plsize
   125                                  
   126 00000268 66B808000080                     mov eax,0x80000008                           ;处理器线性/物理地址尺寸
   127 0000026E 0FA2                             cpuid
   128                                  
   129                                   .no_plsize:
   130                                           ;保存物理和虚拟地址尺寸到系统数据区
   131 00000270 1E                               push ds
   132 00000271 BBE007                           mov bx, SDA_PHY_ADDR >> 4                    ;切换到系统数据区
   133 00000274 8EDB                             mov ds, bx
   134 00000276 A30000                           mov word [0], ax                             ;记录处理器的物理/虚拟地址尺寸
   135 00000279 1F                               pop ds
   136                                  
   137                                           ;准备显示存储器的物理地址尺寸信息
   138 0000027A 50                               push ax                                      ;备份AX（中的虚拟地址部分）
   139                                  
   140 0000027B 25FF00                           and ax, 0x00ff                               ;保留物理地址宽度部分
   141 0000027E BE0200                           mov si, 2
   142 00000281 B30A                             mov bl, 10
   143                                   .re_div0:
   144 00000283 F6F3                             div bl
   145 00000285 80C430                           add ah, 0x30
   146 00000288 88A4[DE00]                       mov [paddr + si], ah
   147 0000028C 4E                               dec si
   148 0000028D 25FF00                           and ax, 0x00ff
   149 00000290 75F1                             jnz .re_div0
   150                                  
   151                                           ;准备显示处理器的虚拟地址尺寸信息
   152 00000292 58                               pop ax
   153                                  
   154 00000293 C1E808                           shr ax, 8                                    ;保留线性地址宽度部分
   155 00000296 BE0200                           mov si, 2
   156 00000299 B30A                             mov bl, 10
   157                                   .re_div1:
   158 0000029B F6F3                             div bl
   159 0000029D 80C430                           add ah, 0x30
   160 000002A0 88A4[F600]                       mov [laddr + si], ah
   161 000002A4 4E                               dec si
   162 000002A5 25FF00                           and ax, 0x00ff
   163 000002A8 75F1                             jnz .re_div1
   164                                  
   165                                           ;显示处理器的物理/虚拟地址尺寸信息
   166 000002AA B403                             mov ah, 0x03                                 ;获取光标位置
   167 000002AC B700                             mov bh, 0x00
   168 000002AE CD10                             int 0x10
   169                                  
   170 000002B0 BD[C800]                         mov bp, cpu_addr
   171 000002B3 B93300                           mov cx, protect - cpu_addr
   172 000002B6 B80113                           mov ax, 0x1301                               ;写字符串，光标移动
   173 000002B9 B700                             mov bh, 0
   174 000002BB B307                             mov bl, 0x07                                 ;属性：黑底白字
   175 000002BD CD10                             int 0x10                                     ;显示字符串
   176                                  
   177                                           ;以下开始进入保护模式，为IA-32e模式做必要的准备工作
   178 000002BF B80010                           mov ax, GDT_PHY_ADDR >> 4                    ;计算GDT所在的逻辑段地址
   179 000002C2 8ED8                             mov ds, ax
   180                                  
   181                                           ;跳过0#号描述符的槽位
   182                                           ;创建1#描述符，保护模式下的代码段描述符
   183 000002C4 66C7060800FFFF0000               mov dword [0x08], 0x0000ffff                 ;基地址为0，界限0xFFFFF，DPL=00
   184 000002CD 66C7060C000098CF00               mov dword [0x0c], 0x00cf9800                 ;4KB粒度，代码段描述符，向上扩展
   185                                  
   186                                           ;创建2#描述符，保护模式下的数据段和堆栈段描述符
   187 000002D6 66C7061000FFFF0000               mov dword [0x10], 0x0000ffff                 ;基地址为0，界限0xFFFFF，DPL=00
   188 000002DF 66C70614000092CF00               mov dword [0x14], 0x00cf9200                 ;4KB粒度，数据段描述符，向上扩展
   189                                  
   190                                           ;创建3#描述符，64位模式下的代码段描述符。为进入64位提前作准备，其L位是1
   191 000002E8 66C7061800FFFF0000               mov dword [0x18], 0x0000ffff                 ;基地址为0，界限0xFFFFF，DPL=00
   192 000002F1 66C7061C000098AF00               mov dword [0x1c], 0x00af9800                 ;4KB粒度，L=1，代码段描述符，向上扩展
   193                                  
   194                                  
   195                                           ;记录GDT的基地址和界限值
   196 000002FA B8E007                           mov ax, SDA_PHY_ADDR >> 4                    ;切换到系统数据区
   197 000002FD 8ED8                             mov ds, ax
   198                                  
   199 000002FF C70602001F00                     mov word [2], 31                             ;描述符表的界限
   200 00000305 66C706040000000100               mov dword [4], GDT_PHY_ADDR                  ;GDT的线性基地址
   201                                  
   202                                           ;加载描述符表寄存器GDTR
   203 0000030E 0F01160200                       lgdt [2]
   204                                  
   205 00000313 E492                             in al, 0x92                                  ;南桥芯片内的端口
   206 00000315 0C02                             or al, 0000_0010B
   207 00000317 E692                             out 0x92, al                                 ;打开A20
   208                                  
   209 00000319 FA                               cli                                          ;中断机制尚未工作
   210                                  
   211 0000031A 0F20C0                           mov eax, cr0
   212 0000031D 6683C801                         or eax, 1
   213 00000321 0F22C0                           mov cr0, eax                                 ;设置PE位
   214                                  
   215                                           ;以下进入保护模式... ...
   216 00000324 66EA[2CF30000]0800               jmp 0x0008: dword LDR_PHY_ADDR + flush       ;16位的描述符选择子：32位偏移
   217                                                                                        ;清流水线并串行化处理器
   218                                           [bits 32]
   219                                    flush:
   220 0000032C B810000000                       mov eax, 0x0010                              ;加载数据段(4GB)选择子
   221 00000331 8ED8                             mov ds, eax
   222 00000333 8EC0                             mov es, eax
   223 00000335 8EE0                             mov fs, eax
   224 00000337 8EE8                             mov gs, eax
   225 00000339 8ED0                             mov ss, eax                                  ;加载堆栈段(4GB)选择子
   226 0000033B BC007C0000                       mov esp, 0x7c00                              ;堆栈指针
   227                                  
   228                                           ;显示信息，表明我们正在保护模式下为进入IA-32e模式做准备
   229 00000340 BB[FBF00000]                     mov ebx, protect + LDR_PHY_ADDR
   230 00000345 E85F010000                       call put_string_flat32
   231                                  
   232                                           ;以下加载系统核心程序
   233 0000034A BF00000200                       mov edi, CORE_PHY_ADDR
   234                                  
   235 0000034F B809000000                       mov eax, COR_START_SECTOR
   236 00000354 89FB                             mov ebx, edi                                 ;起始地址
   237 00000356 E8F9010000                       call read_hard_disk_0                        ;以下读取程序的起始部分（一个扇区）
   238                                  
   239                                           ;以下判断整个程序有多大
   240 0000035B 8B07                             mov eax, [edi]                               ;核心程序尺寸
   241 0000035D 31D2                             xor edx, edx
   242 0000035F B900020000                       mov ecx, 512                                 ;512字节每扇区
   243 00000364 F7F1                             div ecx
   244                                  
   245 00000366 09D2                             or edx, edx
   246 00000368 7501                             jnz @1                                       ;未除尽，因此结果比实际扇区数少1
   247 0000036A 48                               dec eax                                      ;已经读了一个扇区，扇区总数减1
   248                                     @1:
   249 0000036B 09C0                             or eax, eax                                  ;考虑实际长度≤512个字节的情况
   250 0000036D 7410                             jz pge                                       ;EAX=0 ?
   251                                  
   252                                           ;读取剩余的扇区
   253 0000036F 89C1                             mov ecx, eax                                 ;32位模式下的LOOP使用ECX
   254 00000371 B809000000                       mov eax, COR_START_SECTOR
   255 00000376 40                               inc eax                                      ;从下一个逻辑扇区接着读
   256                                     @2:
   257 00000377 E8D8010000                       call read_hard_disk_0
   258 0000037C 40                               inc eax
   259 0000037D E2F8                             loop @2                                      ;循环读，直到读完整个内核
   260                                  
   261                                     pge:
   262                                           ;回填内核加载的位置信息（物理/线性地址）到内核程序头部
   263 0000037F C70508000200000002-              mov dword [CORE_PHY_ADDR + 0x08], CORE_PHY_ADDR
   263 00000388 00                 
   264 00000389 C7050C000200000000-              mov dword [CORE_PHY_ADDR + 0x0c], 0
   264 00000392 00                 
   265                                  
   266                                           ;准备打开分页机制。先确定分页模式（4级或者5级）
   267                                           ;cmp [sda_phy_addr],57                        ;要求使用5级分页吗？
   268                                           ;jz to_5level_page                            ;转5级分页代码
   269                                  
   270                                           ;以下为内核创建4级分页系统，只包含基本部分，覆盖低端1MB物理内存
   271                                  
   272                                           ;>>>>>>>>>>>>>>>>>>>>>>>>>1.创建内核4级头表>>>>>>>>>>>>>>>>>>>>>>>>>>
   273 00000393 BB00A00000                       mov ebx, PML4_PHY_ADDR                       ;4级头表的物理地址
   274                                  
   275                                           ;4级头表的内容清零
   276 00000398 B900040000                       mov ecx, 1024
   277 0000039D 31F6                             xor esi, esi
   278                                     .cls0:
   279 0000039F C7043300000000                   mov dword [ebx + esi], 0
   280 000003A6 83C604                           add esi, 4
   281 000003A9 E2F4                             loop .cls0
   282                                  
   283                                           ;在4级头表内创建指向4级头表自己的表项
   284 000003AB C783F80F000003A000-              mov dword [ebx + 511 * 8], PML4_PHY_ADDR | 3 ;添加属性位
   284 000003B4 00                 
   285 000003B5 C783FC0F0000000000-              mov dword [ebx + 511 * 8 + 4], 0
   285 000003BE 00                 
   286                                  
   287                                           ;在4级头表内创建与低端2MB内存对应的4级头表项。
   288                                           ;即，与线性地址范围：0x0000000000000000--0x00000000001FFFFF对应的4级头表项
   289                                           ;此表项为保证低端2MB物理内存（含内核）在开启分页之后及映射到高端之前可正常访问
   290 000003BF C70303B00000                     mov dword [ebx + 0 * 8], PDPT_PHY_ADDR | 3   ;页目录指针表的物理地址及属性
   291 000003C5 C7430400000000                   mov dword [ebx + 0 * 8 + 4], 0
   292                                  
   293                                           ;将页目录指针表的内容清零
   294 000003CC BB00B00000                       mov ebx, PDPT_PHY_ADDR
   295                                  
   296 000003D1 B900040000                       mov ecx, 1024
   297 000003D6 31F6                             xor esi, esi
   298                                     .cls1:
   299 000003D8 C7043300000000                   mov dword [ebx + esi], 0
   300 000003DF 83C604                           add esi, 4
   301 000003E2 E2F4                             loop .cls1
   302                                  
   303                                           ;在页目录指针表内创建与低端2MB内存对应的表项。
   304                                           ;即，与线性地址范围：0x0000000000000000--0x00000000001FFFFF对应的表项
   305 000003E4 C70303C00000                     mov dword [ebx + 0 * 8], PDT_PHY_ADDR | 3    ;页目录表的物理地址及属性
   306 000003EA C7430400000000                   mov dword [ebx + 0 * 8 + 4], 0
   307                                  
   308                                           ;将页目录表的内容清零
   309 000003F1 BB00C00000                       mov ebx, PDT_PHY_ADDR
   310                                  
   311 000003F6 B900040000                       mov ecx, 1024
   312 000003FB 31F6                             xor esi, esi
   313                                     .cls2:
   314 000003FD C7043300000000                   mov dword [ebx + esi], 0
   315 00000404 83C604                           add esi, 4
   316 00000407 E2F4                             loop .cls2
   317                                  
   318                                           ;在页目录表内创建与低端2MB内存对应的表项。
   319                                           ;即，与线性地址范围：0x0000000000000000--0x00000000001FFFFF对应的表项
   320 00000409 C70383000000                     mov dword [ebx + 0 * 8], 0 | 0x83            ;2MB页的物理地址及属性
   321 0000040F C7430400000000                   mov dword [ebx + 0 * 8 + 4], 0
   322                                  
   323                                  
   324                                           ;在4级头表内创建与线性地址范围0xFFFF800000000000--0xFFFF8000001FFFFF对应的
   325                                           ;4级头表项，将内核映射到高端。内核进入IA-32e模式后应当工作在线性地址高端。
   326 00000416 BB00A00000                       mov ebx, PML4_PHY_ADDR
   327                                  
   328 0000041B C7830008000003B000-              mov dword [ebx + 256 * 8], PDPT_PHY_ADDR | 3 ;页目录指针表的物理地址及属性
   328 00000424 00                 
   329 00000425 C78304080000000000-              mov dword [ebx + 256 * 8 + 4], 0
   329 0000042E 00                 
   330                                  
   331                                           ;在4级头表的高一半预先创建额外的254个头表项
   332 0000042F B801010000                       mov eax, 257
   333 00000434 BA03001000                       mov edx, COR_PDPT_ADDR | 3                   ;从这个地址开始是内核的254个页目录指针表
   334                                     .fill_pml4:
   335 00000439 8914C3                           mov dword [ebx + eax * 8], edx
   336 0000043C C744C30400000000                 mov dword [ebx + eax * 8 + 4], 0
   337 00000444 81C200100000                     add edx, 0x1000
   338 0000044A 40                               inc eax
   339 0000044B 3DFE010000                       cmp eax, 510
   340 00000450 76E7                             jbe .fill_pml4
   341                                  
   342                                           ;将预分配的所有页目录指针表都统统清零
   343 00000452 B800001000                       mov eax, COR_PDPT_ADDR
   344                                     .zero_pdpt:
   345 00000457 C70000000000                     mov dword [eax], 0                           ;相当于将所有页目录指针项清零
   346 0000045D 83C004                           add eax, 4
   347 00000460 3D00E01F00                       cmp eax, COR_PDPT_ADDR + 0x1000 * 254        ;内核所有页目录指针表的结束位置
   348 00000465 72F0                             jb .zero_pdpt
   349                                  
   350                                           ;令CR3寄存器指向4级头表（保护模式下的32位CR3）
   351 00000467 B800A00000                       mov eax, PML4_PHY_ADDR                       ;PCD=PWT=0
   352 0000046C 0F22D8                           mov cr3, eax
   353                                  
   354                                           ;开启物理地址扩展PAE
   355 0000046F 0F20E0                           mov eax, cr4
   356 00000472 0FBAE805                         bts eax, 5
   357 00000476 0F22E0                           mov cr4, eax
   358                                  
   359                                           ;设置型号专属寄存器IA32_EFER.LME，允许IA_32e模式
   360 00000479 B9800000C0                       mov ecx, 0x0c0000080                         ;指定型号专属寄存器IA32_EFER
   361 0000047E 0F32                             rdmsr
   362 00000480 0FBAE808                         bts eax, 8                                   ;设置LME位
   363 00000484 0F30                             wrmsr
   364                                  
   365                                           ;开启分页功能
   366 00000486 0F20C0                           mov eax, cr0
   367 00000489 0FBAE81F                         bts eax, 31                                  ;置位CR0.PG
   368 0000048D 0F22C0                           mov cr0, eax
   369                                  
   370                                           ;打印IA_32e激活信息
   371 00000490 BB[37F10000]                     mov ebx, ia_32e + LDR_PHY_ADDR
   372 00000495 E80F000000                       call put_string_flat32
   373                                  
   374                                           ;通过远返回方式进入64位模式的内核
   375 0000049A 666A18                           push word 0x0018                             ;已定义为常量CORE_CODE64_SEL
   376 0000049D A104000200                       mov eax, dword [CORE_PHY_ADDR + 4]
   377 000004A2 0500000200                       add eax, CORE_PHY_ADDR
   378 000004A7 50                               push eax
   379 000004A8 CB                               retf
   380                                  
   381                                  ;-----------------------------------------------------------------------
   382                                  ;带光标跟随的字符串显示例程。只运行在32位保护模式下，且使用平坦模型。
   383                                  put_string_flat32:                                    ;显示0终止的字符串并移动光标
   384                                                                                        ;输入：EBX=字符串的线性地址
   385                                  
   386 000004A9 53                               push ebx
   387 000004AA 51                               push ecx
   388                                  
   389                                    .getc:
   390 000004AB 8A0B                             mov cl, [ebx]
   391 000004AD 08C9                             or cl, cl                                    ;检测串结束标志（0）
   392 000004AF 7408                             jz .exit                                     ;显示完毕，返回
   393 000004B1 E806000000                       call put_char
   394 000004B6 43                               inc ebx
   395 000004B7 EBF2                             jmp .getc
   396                                  
   397                                    .exit:
   398 000004B9 59                               pop ecx
   399 000004BA 5B                               pop ebx
   400                                  
   401 000004BB C3                               ret                                          ;段内返回
   402                                  
   403                                  ;-------------------------------------------------------------------------------
   404                                  put_char:                                             ;在当前光标处显示一个字符,并推进
   405                                                                                        ;光标。仅用于段内调用
   406                                                                                        ;输入：CL=字符ASCII码
   407 000004BC 60                               pushad
   408                                  
   409                                           ;以下取当前光标位置
   410 000004BD 66BAD403                         mov dx, 0x3d4
   411 000004C1 B00E                             mov al, 0x0e
   412 000004C3 EE                               out dx, al
   413 000004C4 6642                             inc dx                                       ;0x3d5
   414 000004C6 EC                               in al, dx                                    ;高字
   415 000004C7 88C4                             mov ah, al
   416                                  
   417 000004C9 664A                             dec dx                                       ;0x3d4
   418 000004CB B00F                             mov al, 0x0f
   419 000004CD EE                               out dx, al
   420 000004CE 6642                             inc dx                                       ;0x3d5
   421 000004D0 EC                               in al, dx                                    ;低字
   422 000004D1 6689C3                           mov bx, ax                                   ;BX=代表光标位置的16位数
   423 000004D4 81E3FFFF0000                     and ebx, 0x0000ffff                          ;准备使用32位寻址方式访问显存
   424                                  
   425 000004DA 80F90D                           cmp cl, 0x0d                                 ;回车符？
   426 000004DD 750E                             jnz .put_0a
   427 000004DF 6689D8                           mov ax, bx
   428 000004E2 B350                             mov bl, 80
   429 000004E4 F6F3                             div bl
   430 000004E6 F6E3                             mul bl
   431 000004E8 6689C3                           mov bx, ax
   432 000004EB EB4F                             jmp .set_cursor
   433                                  
   434                                    .put_0a:
   435 000004ED 80F90A                           cmp cl, 0x0a                                 ;换行符？
   436 000004F0 7506                             jnz .put_other
   437 000004F2 6683C350                         add bx, 80
   438 000004F6 EB0E                             jmp .roll_screen
   439                                  
   440                                    .put_other:                                         ;正常显示字符
   441 000004F8 66D1E3                           shl bx, 1
   442 000004FB 888B00800B00                     mov [0xb8000 + ebx], cl
   443                                  
   444                                           ;以下将光标位置推进一个字符
   445 00000501 66D1EB                           shr bx, 1
   446 00000504 6643                             inc bx
   447                                  
   448                                    .roll_screen:
   449 00000506 6681FBD007                       cmp bx, 2000                                 ;光标超出屏幕？滚屏
   450 0000050B 7C2F                             jl .set_cursor
   451                                  
   452 0000050D 53                               push ebx
   453                                  
   454 0000050E FC                               cld
   455 0000050F BEA0800B00                       mov esi, 0xb80a0                             ;小心！32位模式下movsb/w/d
   456 00000514 BF00800B00                       mov edi, 0xb8000                             ;使用的是esi/edi/ecx
   457 00000519 B9C0030000                       mov ecx, 960
   458 0000051E F3A5                             rep movsd
   459 00000520 BB000F0000                       mov ebx, 3840                                ;清除屏幕最底一行
   460 00000525 B950000000                       mov ecx, 80                                  ;32位程序应该使用ECX
   461                                    .cls:
   462 0000052A 66C78300800B002007               mov word[0xb8000 + ebx], 0x0720
   463 00000533 83C302                           add ebx, 2
   464 00000536 E2F2                             loop .cls
   465                                  
   466 00000538 5B                               pop ebx
   467 00000539 83EB50                           sub ebx, 80
   468                                  
   469                                    .set_cursor:
   470 0000053C 66BAD403                         mov dx, 0x3d4
   471 00000540 B00E                             mov al, 0x0e
   472 00000542 EE                               out dx, al
   473 00000543 6642                             inc dx                                       ;0x3d5
   474 00000545 88F8                             mov al, bh
   475 00000547 EE                               out dx, al
   476 00000548 664A                             dec dx                                       ;0x3d4
   477 0000054A B00F                             mov al, 0x0f
   478 0000054C EE                               out dx, al
   479 0000054D 6642                             inc dx                                       ;0x3d5
   480 0000054F 88D8                             mov al, bl
   481 00000551 EE                               out dx, al
   482                                  
   483 00000552 61                               popad
   484                                  
   485 00000553 C3                               ret
   486                                  ;-------------------------------------------------------------------------
   487                                  read_hard_disk_0:                                     ;从硬盘读取一个逻辑扇区
   488                                                                                        ;EAX=逻辑扇区号
   489                                                                                        ;EBX=目标缓冲区地址
   490                                                                                        ;返回：EBX=EBX+512
   491 00000554 50                               push eax
   492 00000555 51                               push ecx
   493 00000556 52                               push edx
   494                                  
   495 00000557 50                               push eax
   496                                  
   497 00000558 66BAF201                         mov dx, 0x1f2
   498 0000055C B001                             mov al, 1
   499 0000055E EE                               out dx, al                                   ;读取的扇区数
   500                                  
   501 0000055F 6642                             inc dx                                       ;0x1f3
   502 00000561 58                               pop eax
   503 00000562 EE                               out dx, al                                   ;LBA地址7~0
   504                                  
   505 00000563 6642                             inc dx                                       ;0x1f4
   506 00000565 B108                             mov cl, 8
   507 00000567 D3E8                             shr eax, cl
   508 00000569 EE                               out dx, al                                   ;LBA地址15~8
   509                                  
   510 0000056A 6642                             inc dx                                       ;0x1f5
   511 0000056C D3E8                             shr eax, cl
   512 0000056E EE                               out dx, al                                   ;LBA地址23~16
   513                                  
   514 0000056F 6642                             inc dx                                       ;0x1f6
   515 00000571 D3E8                             shr eax, cl
   516 00000573 0CE0                             or al, 0xe0                                  ;第一硬盘  LBA地址27~24
   517 00000575 EE                               out dx, al
   518                                  
   519 00000576 6642                             inc dx                                       ;0x1f7
   520 00000578 B020                             mov al, 0x20                                 ;读命令
   521 0000057A EE                               out dx, al
   522                                  
   523                                    .waits:
   524 0000057B EC                               in al, dx
   525 0000057C 2488                             and al, 0x88
   526 0000057E 3C08                             cmp al, 0x08
   527 00000580 75F9                             jnz .waits                                   ;不忙，且硬盘已准备好数据传输
   528                                  
   529 00000582 B900010000                       mov ecx, 256                                 ;总共要读取的字数
   530 00000587 66BAF001                         mov dx, 0x1f0
   531                                    .readw:
   532 0000058B 66ED                             in ax, dx
   533 0000058D 668903                           mov [ebx], ax
   534 00000590 83C302                           add ebx, 2
   535 00000593 E2F6                             loop .readw
   536                                  
   537 00000595 5A                               pop edx
   538 00000596 59                               pop ecx
   539 00000597 58                               pop eax
   540                                  
   541 00000598 C3                               ret
   542                                  
   543                                  ;-------------------------------------------------------------------------------
   544                                  section trail
   545                                    ldr_end:
