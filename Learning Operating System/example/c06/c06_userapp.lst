     1                                  ;应用程序，2022-2-2
     2                                  
     3                                  ;===============================================================================
     4                                  section app_header                                ;应用程序头部
     5 00000000 [3201000000000000]        length       dq app_end                         ;#0：用户程序的总长度（字节数）
     6 00000008 [2601000000000000]        entry        dq start                           ;#8：用户程序入口点
     7 00000010 0000000000000000          linear       dq 0                               ;#16：用户程序加载的虚拟（线性）地址
     8                                  
     9                                  ;===============================================================================
    10                                  section app_data                                  ;应用程序数据段
    11 00000000 00<rep 80h>               app_msg      times 128 db 0                     ;应用程序消息缓冲区
    12 00000080 50726F636573732049-       pid_prex     db "Process ID:", 0                ;进程标识符前缀文本
    12 00000089 443A00             
    13 0000008C 00<rep 20h>               pid          times 32 db 0                      ;进程标识符的文本
    14 000000AC 20646F696E6720312B-       delim        db " doing 1+2+3+...+", 0          ;分隔文本
    14 000000B5 322B332B2E2E2E2B00 
    15 000000BE 00<rep 20h>               addend       times 32 db 0                      ;加数的文本
    16 000000DE 3D00                      equal        db "=", 0                          ;等于号
    17 000000E0 00<rep 20h>               cusum        times 32 db 0                      ;相加结果的文本
    18                                  
    19                                  ;===============================================================================
    20                                  section app_code                                  ;应用程序代码段
    21                                  
    22                                  %include "..\common\user_static64.lib"
    23                              <1> ;用户程序使用的例程库，用来模拟高级语言的静态库。有些功能直接在本文件中实现，但
    24                              <1> ;有些功能需要通过syscall指令使用内核提供的系统调用。
    25                              <1> ;创建时间：2022-01-30 18:30，李忠
    26                              <1> ;此文件需要用预处理指令%include引入用户程序。
    27                              <1> 
    28                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    29                              <1>          bits 64
    30                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    31                              <1> bin64_to_dec:                                     ;将二进制数转换为十进制字符串。
    32                              <1>                                                   ;输入：R8=64位二进制数
    33                              <1>                                                   ;      RBX=目标缓冲区线性地址
    34 00000000 50                  <1>          push rax
    35 00000001 53                  <1>          push rbx
    36 00000002 51                  <1>          push rcx
    37 00000003 52                  <1>          push rdx
    38 00000004 4150                <1>          push r8
    39                              <1> 
    40 00000006 4C89C0              <1>          mov rax, r8                              ;!!
    41 00000009 41B80A000000        <1>          mov r8, 10
    42 0000000F 4831C9              <1>          xor rcx, rcx
    43                              <1> 
    44                              <1>   .next_div:
    45 00000012 4831D2              <1>          xor rdx, rdx
    46 00000015 49F7F0              <1>          div r8
    47 00000018 52                  <1>          push rdx                                 ;保存分解的数位
    48 00000019 48FFC1              <1>          inc rcx                                  ;递增压栈的次数
    49 0000001C 4809C0              <1>          or rax, rax                              ;商为0？
    50 0000001F 7402                <1>          jz .rotate
    51 00000021 EBEF                <1>          jmp .next_div
    52                              <1> 
    53                              <1>   .rotate:
    54 00000023 5A                  <1>          pop rdx
    55 00000024 80C230              <1>          add dl, 0x30                             ;数位转换成ASCII编码
    56 00000027 8813                <1>          mov [rbx], dl
    57 00000029 48FFC3              <1>          inc rbx
    58 0000002C E2F5                <1>          loop .rotate
    59                              <1> 
    60 0000002E C60300              <1>          mov byte [rbx], 0
    61                              <1> 
    62 00000031 4158                <1>          pop r8
    63 00000033 5A                  <1>          pop rdx
    64 00000034 59                  <1>          pop rcx
    65 00000035 5B                  <1>          pop rbx
    66 00000036 58                  <1>          pop rax
    67                              <1> 
    68 00000037 C3                  <1>          ret                                      ;段内返回
    69                              <1> 
    70                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    71                              <1> string_concatenates:                              ;将源字符串连接到目的字符串的尾部
    72                              <1>                                                   ;输入：RSI=源字符串的线性地址
    73                              <1>                                                   ;      RDI=目的字符串的线性地址
    74 00000038 50                  <1>          push rax
    75 00000039 56                  <1>          push rsi
    76 0000003A 57                  <1>          push rdi
    77                              <1> 
    78                              <1>   .r0:
    79 0000003B 803F00              <1>          cmp byte [rdi], 0
    80 0000003E 7405                <1>          jz .r1
    81 00000040 48FFC7              <1>          inc rdi
    82 00000043 EBF6                <1>          jmp .r0
    83                              <1> 
    84                              <1>   .r1:
    85 00000045 8A06                <1>          mov al, [rsi]
    86 00000047 8807                <1>          mov [rdi], al
    87 00000049 3C00                <1>          cmp al, 0
    88 0000004B 7408                <1>          jz .r2
    89 0000004D 48FFC6              <1>          inc rsi
    90 00000050 48FFC7              <1>          inc rdi
    91 00000053 EBF0                <1>          jmp .r1
    92                              <1> 
    93                              <1>   .r2:
    94 00000055 5F                  <1>          pop rdi
    95 00000056 5E                  <1>          pop rsi
    96 00000057 58                  <1>          pop rax
    97                              <1> 
    98 00000058 C3                  <1>          ret
    99                              <1> 
   100                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   101                              <1> 
    23                                  
    24                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    25                                           bits 64
    26                                  
    27                                  main:
    28 00000059 B800000000                       mov rax, 0                               ;确定当前程序可以使用的显示行
    29 0000005E 0F05                             syscall                                  ;可用显示行，DH=行号
    30                                  
    31 00000060 B200                             mov dl, 0
    32 00000062 41B10F                           mov r9b, 0x0f
    33                                  
    34 00000065 4C8B25(10000000)                 mov r12, [rel linear]                    ;当前程序加载的起始线性地址
    35                                  
    36 0000006C B804000000                       mov rax, 4                               ;获得当前程序（进程）的标识
    37 00000071 0F05                             syscall
    38 00000073 4989C0                           mov r8, rax
    39 00000076 498D9C24[8C000000]               lea rbx, [r12 + pid]
    40 0000007E E87DFFFFFF                       call bin64_to_dec                        ;将进程标识转换为字符串
    41                                  
    42 00000083 41B800000000                     mov r8, 0                                ;R8用于存放累加和
    43 00000089 41BA01000000                     mov r10, 1                               ;R10用于提供加数
    44                                    .cusum:
    45 0000008F 4D01D0                           add r8, r10
    46 00000092 498D9C24[E0000000]               lea rbx, [r12 + cusum]
    47 0000009A E861FFFFFF                       call bin64_to_dec                        ;本次相加的结果转换为字符串
    48 0000009F 4D87C2                           xchg r8, r10
    49 000000A2 498D9C24[BE000000]               lea rbx, [r12 + addend]
    50 000000AA E851FFFFFF                       call bin64_to_dec                        ;本次的加数转换为字符串
    51 000000AF 4D87C2                           xchg r8, r10
    52                                  
    53 000000B2 498DBC24[00000000]               lea rdi, [r12 + app_msg]
    54 000000BA C60700                           mov byte [rdi], 0
    55                                  
    56 000000BD 498DB424[80000000]               lea rsi, [r12 + pid_prex]
    57 000000C5 E86EFFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    58 000000CA 498DB424[8C000000]               lea rsi, [r12 + pid]
    59 000000D2 E861FFFFFF                       call string_concatenates
    60 000000D7 498DB424[AC000000]               lea rsi, [r12 + delim]
    61 000000DF E854FFFFFF                       call string_concatenates
    62 000000E4 498DB424[BE000000]               lea rsi, [r12 + addend]
    63 000000EC E847FFFFFF                       call string_concatenates
    64 000000F1 498DB424[DE000000]               lea rsi, [r12 + equal]
    65 000000F9 E83AFFFFFF                       call string_concatenates
    66 000000FE 498DB424[E0000000]               lea rsi, [r12 + cusum]
    67 00000106 E82DFFFFFF                       call string_concatenates
    68                                  
    69 0000010B B802000000                       mov rax, 2                               ;在指定坐标显示字符串
    70 00000110 4889FB                           mov rbx, rdi
    71 00000113 0F05                             syscall
    72                                  
    73 00000115 49FFC2                           inc r10
    74 00000118 4981FAA0860100                   cmp r10, 100000
    75 0000011F 0F8E6AFFFFFF                     jle .cusum
    76                                  
    77 00000125 C3                               ret
    78                                  
    79                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    80                                  start:   ;程序的入口点
    81                                  
    82                                           ;这里放置初始化代码，比如初始化全局数据（变量）
    83                                  
    84 00000126 E82EFFFFFF                       call main
    85                                  
    86                                           ;这里放置清理代码
    87                                  
    88 0000012B B805000000                       mov rax, 5                               ;终止任务
    89 00000130 0F05                             syscall
    90                                  
    91                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    92                                  app_end:
