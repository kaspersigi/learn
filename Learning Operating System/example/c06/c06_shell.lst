     1                                  ;系统外壳程序，2022-1-19。用于模拟一个操作系统用户接口，比如Linux控制台
     2                                  
     3                                  ;===============================================================================
     4                                  section shell_header                              ;外壳程序头部
     5 00000000 [A200000000000000]        length       dq shell_end                       ;#0：外壳程序的总长度（字节数）
     6 00000008 [9D00000000000000]        entry        dq start                           ;#8：外壳入口点
     7 00000010 0000000000000000          linear       dq 0                               ;#16：外壳加载的虚拟（线性）地址
     8                                  
     9                                  ;===============================================================================
    10                                  section shell_data                                ;外壳程序数据段
    11 00000000 4F53205348454C4C2D        shell_msg    db "OS SHELL-"
    12 00000009 00<rep 20h>               time_buff    times 32 db 0
    13                                  
    14                                  ;===============================================================================
    15                                  section shell_code                                ;外壳程序代码段
    16                                  
    17                                  %include "..\common\user_static64.lib"
    18                              <1> ;用户程序使用的例程库，用来模拟高级语言的静态库。有些功能直接在本文件中实现，但
    19                              <1> ;有些功能需要通过syscall指令使用内核提供的系统调用。
    20                              <1> ;创建时间：2022-01-30 18:30，李忠
    21                              <1> ;此文件需要用预处理指令%include引入用户程序。
    22                              <1> 
    23                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    24                              <1>          bits 64
    25                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    26                              <1> bin64_to_dec:                                     ;将二进制数转换为十进制字符串。
    27                              <1>                                                   ;输入：R8=64位二进制数
    28                              <1>                                                   ;      RBX=目标缓冲区线性地址
    29 00000000 50                  <1>          push rax
    30 00000001 53                  <1>          push rbx
    31 00000002 51                  <1>          push rcx
    32 00000003 52                  <1>          push rdx
    33 00000004 4150                <1>          push r8
    34                              <1> 
    35 00000006 4C89C0              <1>          mov rax, r8                              ;!!
    36 00000009 41B80A000000        <1>          mov r8, 10
    37 0000000F 4831C9              <1>          xor rcx, rcx
    38                              <1> 
    39                              <1>   .next_div:
    40 00000012 4831D2              <1>          xor rdx, rdx
    41 00000015 49F7F0              <1>          div r8
    42 00000018 52                  <1>          push rdx                                 ;保存分解的数位
    43 00000019 48FFC1              <1>          inc rcx                                  ;递增压栈的次数
    44 0000001C 4809C0              <1>          or rax, rax                              ;商为0？
    45 0000001F 7402                <1>          jz .rotate
    46 00000021 EBEF                <1>          jmp .next_div
    47                              <1> 
    48                              <1>   .rotate:
    49 00000023 5A                  <1>          pop rdx
    50 00000024 80C230              <1>          add dl, 0x30                             ;数位转换成ASCII编码
    51 00000027 8813                <1>          mov [rbx], dl
    52 00000029 48FFC3              <1>          inc rbx
    53 0000002C E2F5                <1>          loop .rotate
    54                              <1> 
    55 0000002E C60300              <1>          mov byte [rbx], 0
    56                              <1> 
    57 00000031 4158                <1>          pop r8
    58 00000033 5A                  <1>          pop rdx
    59 00000034 59                  <1>          pop rcx
    60 00000035 5B                  <1>          pop rbx
    61 00000036 58                  <1>          pop rax
    62                              <1> 
    63 00000037 C3                  <1>          ret                                      ;段内返回
    64                              <1> 
    65                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    66                              <1> string_concatenates:                              ;将源字符串连接到目的字符串的尾部
    67                              <1>                                                   ;输入：RSI=源字符串的线性地址
    68                              <1>                                                   ;      RDI=目的字符串的线性地址
    69 00000038 50                  <1>          push rax
    70 00000039 56                  <1>          push rsi
    71 0000003A 57                  <1>          push rdi
    72                              <1> 
    73                              <1>   .r0:
    74 0000003B 803F00              <1>          cmp byte [rdi], 0
    75 0000003E 7405                <1>          jz .r1
    76 00000040 48FFC7              <1>          inc rdi
    77 00000043 EBF6                <1>          jmp .r0
    78                              <1> 
    79                              <1>   .r1:
    80 00000045 8A06                <1>          mov al, [rsi]
    81 00000047 8807                <1>          mov [rdi], al
    82 00000049 3C00                <1>          cmp al, 0
    83 0000004B 7408                <1>          jz .r2
    84 0000004D 48FFC6              <1>          inc rsi
    85 00000050 48FFC7              <1>          inc rdi
    86 00000053 EBF0                <1>          jmp .r1
    87                              <1> 
    88                              <1>   .r2:
    89 00000055 5F                  <1>          pop rdi
    90 00000056 5E                  <1>          pop rsi
    91 00000057 58                  <1>          pop rax
    92                              <1> 
    93 00000058 C3                  <1>          ret
    94                              <1> 
    95                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    96                              <1> 
    18                                  
    19                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    20                                           bits 64
    21                                  
    22                                  main:
    23                                           ;这里可显示一个界面，比如Windows桌面或者Linux控制台窗口，用于接收用户
    24                                           ;输入的命令，包括显示磁盘文件、设置系统参数或者运行一个程序。我们的系
    25                                           ;统很简单，所以不提供这些功能。
    26                                  
    27                                           ;以下， 模拟按用户的要求运行3个程序......
    28 00000059 41B864000000                     mov r8, 100
    29 0000005F B803000000                       mov rax, 3
    30 00000064 0F05                             syscall
    31 00000066 0F05                             syscall
    32 00000068 0F05                             syscall                                  ;用同一个副本创建3个任务
    33                                  
    34 0000006A B800000000                       mov rax, 0
    35 0000006F 0F05                             syscall                                  ;可用显示行，DH=行号
    36 00000071 B200                             mov dl, 0
    37 00000073 41B15F                           mov r9b, 0x5f
    38                                  
    39 00000076 4C8B25(10000000)                 mov r12, [rel linear]
    40                                    _time:
    41 0000007D 498D9C24[09000000]               lea rbx, [r12 + time_buff]
    42 00000085 B801000000                       mov rax, 1
    43 0000008A 0F05                             syscall
    44                                  
    45 0000008C 498D9C24[00000000]               lea rbx, [r12 + shell_msg]
    46 00000094 B802000000                       mov rax, 2
    47 00000099 0F05                             syscall
    48                                  
    49 0000009B EBE0                             jmp _time
    50                                  
    51                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    52                                  start:    ;程序的入口点
    53 0000009D E8B7FFFFFF                       call main
    54                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    55                                  shell_end:
