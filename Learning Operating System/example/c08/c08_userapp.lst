     1                                  ;应用程序，2022-2-2
     2                                  
     3                                  ;===============================================================================
     4                                  section app_header                                ;应用程序头部
     5 00000000 [6701000000000000]        length       dq app_end                         ;#0：用户程序的总长度（字节数）
     6 00000008 [5B01000000000000]        entry        dq start                           ;#8：用户程序入口点
     7 00000010 0000000000000000          linear       dq 0                               ;#16：用户程序加载的虚拟（线性）地址
     8                                  
     9                                  ;===============================================================================
    10                                  section app_data                                  ;应用程序数据段
    11                                  
    12 00000000 00<rep 80h>               app_msg      times 128 db 0                     ;应用程序消息缓冲区
    13                                  
    14 00000080 5461736B2000              pid_prex     db "Task ", 0                      ;进程标识前缀文本
    15 00000086 00<rep 20h>               pid          times 32 db 0                      ;进程标识的文本
    16                                  
    17 000000A6 207468726561642000        tid_prex     db " thread ", 0                   ;线程标识前缀文本
    18 000000AF 00<rep 20h>               tid          times 32 db 0                      ;线程标识的文本
    19                                  
    20 000000CF 206F6E204350552000        cpu_prex     db " on CPU ", 0                   ;处理器标识的前缀文本
    21 000000D8 00<rep 20h>               pcpu         times 32 db 0                      ;处理器标识的文本
    22                                  
    23 000000F8 20646F20312B322B33-       delim        db " do 1+2+3+...+", 0             ;分隔文本
    23 00000101 2B2E2E2E2B00       
    24 00000107 00<rep 20h>               addend       times 32 db 0                      ;加数的文本
    25 00000127 3D00                      equal        db "=", 0                          ;等于号
    26 00000129 00<rep 20h>               cusum        times 32 db 0                      ;相加结果的文本
    27                                  
    28                                  ;===============================================================================
    29                                  section app_code                                  ;应用程序代码段
    30                                  
    31                                  %include "..\common\user_static64.lib"
    32                              <1> ;用户程序使用的例程库，用来模拟高级语言的静态库。有些功能直接在本文件中实现，但
    33                              <1> ;有些功能需要通过syscall指令使用内核提供的系统调用。
    34                              <1> ;创建时间：2022-01-30 18:30，李忠
    35                              <1> ;此文件需要用预处理指令%include引入用户程序。
    36                              <1> 
    37                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    38                              <1>          bits 64
    39                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    40                              <1> bin64_to_dec:                                     ;将二进制数转换为十进制字符串。
    41                              <1>                                                   ;输入：R8=64位二进制数
    42                              <1>                                                   ;      RBX=目标缓冲区线性地址
    43 00000000 50                  <1>          push rax
    44 00000001 53                  <1>          push rbx
    45 00000002 51                  <1>          push rcx
    46 00000003 52                  <1>          push rdx
    47 00000004 4150                <1>          push r8
    48                              <1> 
    49 00000006 4C89C0              <1>          mov rax, r8                              ;!!
    50 00000009 41B80A000000        <1>          mov r8, 10
    51 0000000F 4831C9              <1>          xor rcx, rcx
    52                              <1> 
    53                              <1>   .next_div:
    54 00000012 4831D2              <1>          xor rdx, rdx
    55 00000015 49F7F0              <1>          div r8
    56 00000018 52                  <1>          push rdx                                 ;保存分解的数位
    57 00000019 48FFC1              <1>          inc rcx                                  ;递增压栈的次数
    58 0000001C 4809C0              <1>          or rax, rax                              ;商为0？
    59 0000001F 7402                <1>          jz .rotate
    60 00000021 EBEF                <1>          jmp .next_div
    61                              <1> 
    62                              <1>   .rotate:
    63 00000023 5A                  <1>          pop rdx
    64 00000024 80C230              <1>          add dl, 0x30                             ;数位转换成ASCII编码
    65 00000027 8813                <1>          mov [rbx], dl
    66 00000029 48FFC3              <1>          inc rbx
    67 0000002C E2F5                <1>          loop .rotate
    68                              <1> 
    69 0000002E C60300              <1>          mov byte [rbx], 0
    70                              <1> 
    71 00000031 4158                <1>          pop r8
    72 00000033 5A                  <1>          pop rdx
    73 00000034 59                  <1>          pop rcx
    74 00000035 5B                  <1>          pop rbx
    75 00000036 58                  <1>          pop rax
    76                              <1> 
    77 00000037 C3                  <1>          ret                                      ;段内返回
    78                              <1> 
    79                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    80                              <1> string_concatenates:                              ;将源字符串连接到目的字符串的尾部
    81                              <1>                                                   ;输入：RSI=源字符串的线性地址
    82                              <1>                                                   ;      RDI=目的字符串的线性地址
    83 00000038 50                  <1>          push rax
    84 00000039 56                  <1>          push rsi
    85 0000003A 57                  <1>          push rdi
    86                              <1> 
    87                              <1>   .r0:
    88 0000003B 803F00              <1>          cmp byte [rdi], 0
    89 0000003E 7405                <1>          jz .r1
    90 00000040 48FFC7              <1>          inc rdi
    91 00000043 EBF6                <1>          jmp .r0
    92                              <1> 
    93                              <1>   .r1:
    94 00000045 8A06                <1>          mov al, [rsi]
    95 00000047 8807                <1>          mov [rdi], al
    96 00000049 3C00                <1>          cmp al, 0
    97 0000004B 7408                <1>          jz .r2
    98 0000004D 48FFC6              <1>          inc rsi
    99 00000050 48FFC7              <1>          inc rdi
   100 00000053 EBF0                <1>          jmp .r1
   101                              <1> 
   102                              <1>   .r2:
   103 00000055 5F                  <1>          pop rdi
   104 00000056 5E                  <1>          pop rsi
   105 00000057 58                  <1>          pop rax
   106                              <1> 
   107 00000058 C3                  <1>          ret
   108                              <1> 
   109                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   110                              <1> 
    32                                  
    33                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    34                                           bits 64
    35                                  
    36                                  main:
    37 00000059 B800000000                       mov rax, 0                               ;确定当前程序可以使用的显示行
    38 0000005E 0F05                             syscall                                  ;可用显示行，DH=行号
    39                                  
    40 00000060 B200                             mov dl, 0
    41 00000062 41B10F                           mov r9b, 0x0f
    42                                  
    43 00000065 4C8B25(10000000)                 mov r12, [rel linear]                    ;当前程序加载的起始线性地址
    44                                  
    45 0000006C B804000000                       mov rax, 4                               ;获得当前程序（进程）的标识
    46 00000071 0F05                             syscall
    47 00000073 4989C0                           mov r8, rax
    48 00000076 498D9C24[86000000]               lea rbx, [r12 + pid]
    49 0000007E E87DFFFFFF                       call bin64_to_dec                        ;将进程标识转换为字符串
    50                                  
    51 00000083 41B800000000                     mov r8, 0                                ;R8用于存放累加和
    52 00000089 41BA01000000                     mov r10, 1                               ;R10用于提供加数
    53                                    .cusum:
    54 0000008F 4D01D0                           add r8, r10
    55 00000092 498D9C24[29010000]               lea rbx, [r12 + cusum]
    56 0000009A E861FFFFFF                       call bin64_to_dec                        ;本次相加的结果转换为字符串
    57                                  
    58 0000009F 4D87C2                           xchg r8, r10
    59 000000A2 498D9C24[07010000]               lea rbx, [r12 + addend]
    60 000000AA E851FFFFFF                       call bin64_to_dec                        ;本次的加数转换为字符串
    61                                  
    62 000000AF 4D87C2                           xchg r8, r10
    63                                  
    64 000000B2 B806000000                       mov rax, 6                               ;获得当前处理器的编号
    65 000000B7 0F05                             syscall
    66                                  
    67 000000B9 4150                             push r8
    68 000000BB 4989C0                           mov r8, rax
    69 000000BE 498D9C24[D8000000]               lea rbx, [r12 + pcpu]
    70 000000C6 E835FFFFFF                       call bin64_to_dec                        ;将处理器的编号转换为字符串
    71 000000CB 4158                             pop r8
    72                                  
    73 000000CD 498DBC24[00000000]               lea rdi, [r12 + app_msg]
    74 000000D5 C60700                           mov byte [rdi], 0
    75                                  
    76 000000D8 498DB424[80000000]               lea rsi, [r12 + pid_prex]
    77 000000E0 E853FFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    78                                  
    79 000000E5 498DB424[86000000]               lea rsi, [r12 + pid]
    80 000000ED E846FFFFFF                       call string_concatenates
    81                                  
    82 000000F2 498DB424[CF000000]               lea rsi, [r12 + cpu_prex]
    83 000000FA E839FFFFFF                       call string_concatenates
    84                                  
    85 000000FF 498DB424[D8000000]               lea rsi, [r12 + pcpu]
    86 00000107 E82CFFFFFF                       call string_concatenates
    87                                  
    88 0000010C 498DB424[F8000000]               lea rsi, [r12 + delim]
    89 00000114 E81FFFFFFF                       call string_concatenates
    90                                  
    91 00000119 498DB424[07010000]               lea rsi, [r12 + addend]
    92 00000121 E812FFFFFF                       call string_concatenates
    93                                  
    94 00000126 498DB424[27010000]               lea rsi, [r12 + equal]
    95 0000012E E805FFFFFF                       call string_concatenates
    96                                  
    97 00000133 498DB424[29010000]               lea rsi, [r12 + cusum]
    98 0000013B E8F8FEFFFF                       call string_concatenates
    99                                  
   100 00000140 B802000000                       mov rax, 2                               ;在指定坐标显示字符串
   101 00000145 4889FB                           mov rbx, rdi
   102 00000148 0F05                             syscall
   103                                  
   104 0000014A 49FFC2                           inc r10
   105 0000014D 4981FA80969800                   cmp r10, 10000000
   106 00000154 0F8E35FFFFFF                     jle .cusum
   107                                  
   108 0000015A C3                               ret
   109                                  
   110                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   111                                  start:   ;程序的入口点
   112                                  
   113                                           ;这里放置初始化代码，比如初始化全局数据（变量）
   114                                  
   115 0000015B E8F9FEFFFF                       call main
   116                                  
   117                                           ;这里放置清理代码
   118                                  
   119 00000160 B805000000                       mov rax, 5                               ;终止任务
   120 00000165 0F05                             syscall
   121                                  
   122                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   123                                  app_end:
